<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-07-07T23:57:20+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">syh 的博客</title><subtitle>记录计算机专业相关内容，Mens et Manus
</subtitle><author><name>syh</name><email>songibicf@gmail.com</email></author><entry><title type="html">数据结构与序列接口</title><link href="http://localhost:4000/%E7%AE%97%E6%B3%95/2022/07/07/%E7%AE%97%E6%B3%95-0001.html" rel="alternate" type="text/html" title="数据结构与序列接口" /><published>2022-07-07T00:00:00+08:00</published><updated>2022-07-07T00:00:00+08:00</updated><id>http://localhost:4000/%E7%AE%97%E6%B3%95/2022/07/07/%E7%AE%97%E6%B3%95-0001</id><content type="html" xml:base="http://localhost:4000/%E7%AE%97%E6%B3%95/2022/07/07/%E7%AE%97%E6%B3%95-0001.html"><![CDATA[<h3 id="1-数据结构">1. 数据结构</h3>
<ul>
  <li><strong>数据结构</strong>是存储数据的一种方式，通过实现特定算法来支持特定的数据操作。</li>
  <li>
    <p>数据结构所支持的所有操作的集合叫做<strong>接口</strong> (interface/API/ADT)</p>
  </li>
  <li>接口相当于<strong>规范</strong> (specification)，指定了支持的操作。</li>
  <li>数据结构是<strong>表现</strong> (representation)，指定了操作的具体实现。</li>
</ul>

<h3 id="2-序列接口-sequence-interface">2. 序列接口 (Sequence Interface)</h3>
<p>序列由多个有特定顺序的项组成，例如长度为 n 的序列可以表示为 (x0, x1, x2, …, xn-1)。序列接口指定的操作有：</p>

<p><img src="/image/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95-0001-1.png" alt="序列操作" /></p>

<h3 id="3-序列的三种实现方式">3. 序列的三种实现方式</h3>
<p>序列接口指定了序列所要支持的创建操作、静态操作、动态操作。序列数据结构有三种实现方式：数组序列 ( Array Sequence )、链表序列 ( Linked List Sequence )、动态数组序列 ( Dynamic Array Sequence )。这三种数据结构有一致的序列接口，但是内部的实现方式不同，导致的结果是操作的时间复杂度不同。</p>

<h4 id="31-数组序列">3.1 数组序列</h4>
<ul>
  <li>数组序列维持内存中固定尺寸的存储空间，并把序列中的每个项依次放入内存中。例如创建有 10 个项的 int 数组，那么就需要调用 (int *)malloc(sizeof(int) * 10) 来分配固定尺寸的空间。</li>
  <li>由于第 i 项的地址可以直接计算出来，静态操作中的访问和设置花费 O(1) 时间。</li>
  <li>动态操作比较特殊。由于内存中分配的存储空间尺寸是固定的，因此对数组的任何动态修改，都需要重新分配存储空间，然后执行复制操作，时间复杂度为 O(n)。</li>
</ul>

<p><img src="/image/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95-0001-2.png" alt="数组序列的的时间复杂度" /></p>

<h4 id="32-链表序列">3.2 链表序列</h4>
<p>存储：</p>
<ul>
  <li>通过指针来实现。</li>
  <li>每个项存储在结点 ( node ) 中，每个结点包含项 ( node.item )，同时包含指向下一个结点的指针 ( node.next )。</li>
  <li>链表序列保持了指向第一个结点的指针，一般叫做 head</li>
</ul>

<p>静态操作：</p>
<ul>
  <li>无法直接计算出项的地址，只能从 head 结点依次往后遍历，时间复杂度为 O(n)</li>
</ul>

<p>动态操作：</p>
<ul>
  <li>在链表头插入和删除结点只需要 O(1) 时间复杂度，修改指针即可完成。</li>
  <li>由于项的顺序是通过指针来链接起来的，通过修改指针，就可以实现重排结点。不需要像数组序列一样移动大量的项。</li>
  <li>但是 insert_last，delete_last，insert_at，delete_at 都得首先找到结点，然后再修改指针，时间复杂度还是为 O(n)。</li>
</ul>

<p>链表序列相比于数组序列，在静态操作上不占优势。在动态操作上，优势也只在 insert_first, delete_first 操作上。</p>

<p><img src="/image/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95-0001-3.png" alt="链表序列的时间复杂度" /></p>

<h4 id="33-动态数组序列">3.3 动态数组序列</h4>
<p>主要目的：保持访问操作为 O(1) 的前提下，实现 insert_last, delete_last 时间复杂度为 O(1)。python 中的 list 类型为动态数组。</p>

<p>存储：</p>
<ul>
  <li>主要方法：既然数组序列中动态操作的时间花费在往新分配的存储空间复制元素上，那么就一次分配相对大的存储空间。只要存储空间不占满，对末尾元素的修改就不需要执行耗时的分配空间和复制操作。序列长度与存储空间长度的比值 r 要维持在一定的比例。</li>
</ul>

<p>静态操作：</p>
<ul>
  <li>由于在数组的基础上实现，可以实现随机访问。</li>
</ul>

<p>动态操作：</p>
<ul>
  <li>和数组差别在于每次操作都得检查 r, 判断是否需要重新分配存储空间。</li>
  <li>末尾插入
    <ul>
      <li>如果 r &lt; 1, 直接在末尾插入</li>
      <li>如果 r == 1， 在末尾要分配 Θ(n) 额外的空间来维持 r</li>
      <li>由于提前分配了多余的存储空间，在下次分配前，可以插入 Θ(n) 次。摊还分析后，在末尾插入元素的平均时间复杂度只有 O(1)</li>
    </ul>
  </li>
  <li>末尾删除
    <ul>
      <li>可以直接删除，但是为了节省空间，当 r 小于阈值 rd 时，重新分配一个小的空间。例如 rd 可以取 1/4，分配的空间可以取为原先空间的一半，当删除元素到只有存储空间的 1/4 时，就会把存储空间重新分配为一半，r 维持在 [1/4, 1]。</li>
      <li>平均后，末尾删除操作的时间复杂度为 O(1)</li>
    </ul>
  </li>
</ul>

<p>三种序列实现所涉及操作的时间复杂度：</p>

<p><img src="/image/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95-0001-4.png" alt="动态数组序列的时间复杂度" /></p>

<p>三种序列数据结构各有特点，以上介绍的只是基本实现，这些数据结构有非常多种的变形，以达到不同的应用目的。例如，除了上面介绍的单链表，还有双链表、循环链表，除了在末尾动态分配空间的动态数组，还可以在序列开头也进行动态分配。要根据实际的操作选择合适的数据结构。</p>]]></content><author><name>syh</name><email>songibicf@gmail.com</email></author><category term="算法" /><summary type="html"><![CDATA[1. 数据结构 数据结构是存储数据的一种方式，通过实现特定算法来支持特定的数据操作。 数据结构所支持的所有操作的集合叫做接口 (interface/API/ADT)]]></summary></entry><entry><title type="html">集合接口与排序</title><link href="http://localhost:4000/%E7%AE%97%E6%B3%95/2022/07/07/%E7%AE%97%E6%B3%95-0002.html" rel="alternate" type="text/html" title="集合接口与排序" /><published>2022-07-07T00:00:00+08:00</published><updated>2022-07-07T00:00:00+08:00</updated><id>http://localhost:4000/%E7%AE%97%E6%B3%95/2022/07/07/%E7%AE%97%E6%B3%95-0002</id><content type="html" xml:base="http://localhost:4000/%E7%AE%97%E6%B3%95/2022/07/07/%E7%AE%97%E6%B3%95-0002.html"><![CDATA[<h3 id="1-集合接口-set-interface">1. 集合接口 (Set Interface)</h3>
<p>集合是由具有唯一性的对象所组成的无序多项集，常用的用途包括成员检测、从序列中去除重复项以及数学中的集合类计算。集合接口定义的操作包括：</p>

<p><img src="/image/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95-0002-1.png" alt="集合接口定义的操作" /></p>

<p>集合数据类型非常依赖于 find 操作，例如静态操作的 find(k)，动态操作也要先验证集合中的元素，排序操作需要找到特定键的元素。涉及到查找元素的操作，就离不开<strong>排序</strong>。对项进行排序后，才能用二分查找快速定位到项，才能快速找到最小项、最大项、前一个项、后一个项。</p>

<p><img src="/image/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95-0002-2.png" alt="集合操作的时间复杂度" /></p>

<h3 id="2-排序-sorting">2. 排序 (Sorting)</h3>
<p>排序是数据结构中的基本算法，有多种不同时间复杂度的算法。</p>

<ul>
  <li>输入：长度为 n 的数组 A</li>
  <li>输出：有序的数组 B，项依据 key 从小到大排列</li>
</ul>

<p>概念：</p>
<ul>
  <li>原位排序：在排序时只使用 O(1) 的额外空间</li>
  <li>稳定性：输入数组中有相同值的项，在输出数组中排列的先后关系不变</li>
</ul>

<h4 id="21-permutation-sort">2.1 Permutation Sort</h4>
<p>简单、暴力的排序方法。尝试每一种 A 的排列，直到找到有序的排列，返回时间复杂度为 Ω(n! · n)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def permutation_sort(A):
    ''' sort A ''' 
    for B in permutations(A):
        if is_sorted(B):
            return B
</code></pre></div></div>
<h4 id="22-选择排序-selection-sort">2.2 选择排序 (Selection Sort)</h4>
<p>找到 A[:i+1] 中的最大值，把最大值交换到 A[i]，然后递归排序 A[:i]</p>

<ul>
  <li>时间复杂度为 O(n^2)</li>
  <li>原位排序</li>
  <li>不是稳定排序</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 递归实现
def selection_sort(A, i=None):
    ''' Sort A[:i+1] '''
    if i is None: i = len(A)-1
    if i &gt; 0:
        j = prefix_max(A, i)
        A[i], A[j] = A[j], A[i]  # swap
        selection_sort(A, i-1)   # recursion
def prefix_max(A, i):
    ''' 找到 A[:i+1] 中返回最大值的索引，递归实现 '''
    if i&gt;0:
        j = prefix_max(A, i-1)
        if A[i] &lt; A[j]:
            return j
    return i

# 迭代实现
def selection_sort(A):
    for i in range(len(A)-1, 0, -1):
        m = i
        for j in range(i):
            if A[m] &lt; A[j]:
                m = j
        A[m], A[i] = A[i], A[m]
</code></pre></div></div>

<h4 id="23-插入排序-insertion-sort">2.3 插入排序 (Insertion Sort)</h4>
<p>递归排序 A[:i]，i 从 1 到 n。每次排序时，前面的项已经排好序，只需要把最后项插入到合适的位置。</p>

<ul>
  <li>时间复杂度为 O(n^2)</li>
  <li>原位排序</li>
  <li>稳定排序</li>
</ul>

<p>插入排序和选择排序比较类似，都是维持一个排好序的项的子集，然后不断往子集里增加项，直到所有元素都拍好序。不同点在于：</p>
<ul>
  <li>选择排序先排序最大的 i 项</li>
  <li>插入排序先排序数组头 i 项</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 递归实现
def insertion_sort(A, i=None):
    if i is None:
        i = len(A) - 1
    if i &gt; 0:
        insertion_sort(A, i-1)
        insert_last(A, i)
def insert_last(A, i):
    '''把第i个元素插入到合适的位置'''
    if i&gt;0 and A[i-1]&gt;A[i]:
        A[i-1], A[i] = A[i], A[i-1]
        insert_last(A, i-1)

# 迭代实现
def insertion_sort(A):
    for i in range(1, len(A)):
        j = i
        while j&gt;0 and A[j]&lt;A[j-1]:
            A[j-1], A[j] = A[j], A[j-1]
            j = j - 1
</code></pre></div></div>

<h4 id="24-归并排序-merge-sort">2.4 归并排序 (Merge Sort)</h4>
<p>分治法，把整个数据分成两半，对两个子数组递归排序，然后经过 O(n) 的合并步骤，得到最后的排序结果。</p>

<ul>
  <li>递归表达式为 T(n) = 2T(n/2) + Θ(n)，时间复杂度为 Θ(nlogn)</li>
  <li>不是原位排序</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def merge_sort(A, a=0, b=None):
    if b is None:  b = len(A)
    if b-a &gt; 1:
        c = (a+b+1)//2
        merge_sort(A, a, c)
        merge_sort(A, c, b)
        L, R = A[a:c], A[c:b]
        merge(L, R, A, len(L), len(R), a, b)

def merge(L, R, A, i, j, a, b):
    ''' 
    Merge sorted L[:i], and R[:j] into A[a:b] 
    递归实现，每次从 L 和 R 中选出最大值，放入到 A[b-1] 处，然后递归
    '''
    if a &lt; b:
        if (j&lt;=0) or (i&gt;0 and L[i-1]&gt;R[j-1]): # R 没有元素或最大值在 L 中
            A[b-1] = L[i-1]
            i -= 1
        else:  # L 没有元素或最大值在 R 中
            A[b-1] = R[j-1]
            j -= 1
        merge(L, R, A, i, j, a, b-1)
</code></pre></div></div>

<h3 id="3-递归表达式的求解">3. 递归表达式的求解</h3>
<p>递归在算法中非常重要，一方面算法的正确性证明要用到递归，另一方面算法本身要用到递归。通过递归把问题分解成子问题，可以降低问题的求解难度，写出非常易于理解的代码。</p>

<p>利用递归法求解问题要经历三个步骤：</p>
<ol>
  <li>分解：把问题分解成子问题。最基础的情况称为基本情况，写在函数开头。</li>
  <li>解决：递归调用方法，解决子问题</li>
  <li>合并：通过子问题求解得到的结果，合并出问题的解</li>
</ol>

<p>分析递归算法的时间复杂度，需要求解得到的递归表达式。递归表达式是规模为 n 的问题的时间复杂度 T(n) 与较小规模子问题的时间复杂度(根据子问题的规模而定，常见的有 T(n-1), T(n/2))的关系。通过递归表达式，可以得到 T(n) 的值。</p>

<p>递归表达式的求解方法：</p>
<ul>
  <li>代入法 (Substitution): 猜测一个解，带入到表达式中，证明表达式成立</li>
  <li>递归树法 (Recurrence Tree): 画出表示递归调用的树，累加结点的值</li>
  <li>主方法 (Master Theorem): 代入公式求解</li>
</ul>

<p>一些递归表达式求解结果：</p>

<table>
  <thead>
    <tr>
      <th>递归表达式</th>
      <th>T(n)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>T(n) = T(n/2) + O(1)</td>
      <td>O(logn)</td>
    </tr>
    <tr>
      <td>T(n) = T(n-1) + O(1)</td>
      <td>O(n)</td>
    </tr>
    <tr>
      <td>T(n) = T(n-1) + O(n)</td>
      <td>O(n^2)</td>
    </tr>
    <tr>
      <td>T(n) =2T(n-1) + O(1)</td>
      <td>O(2^n)</td>
    </tr>
    <tr>
      <td>T(n) = T(2n/3)+ O(1)</td>
      <td>O(logn)</td>
    </tr>
    <tr>
      <td>T(n) =2T(n/2) + O(1)</td>
      <td>O(n)</td>
    </tr>
    <tr>
      <td>T(n) = T(n/2) + O(n)</td>
      <td>O(n)</td>
    </tr>
    <tr>
      <td>T(n) =4T(n/2) + O(n)</td>
      <td>O(n^2)</td>
    </tr>
  </tbody>
</table>]]></content><author><name>syh</name><email>songibicf@gmail.com</email></author><category term="算法" /><summary type="html"><![CDATA[1. 集合接口 (Set Interface) 集合是由具有唯一性的对象所组成的无序多项集，常用的用途包括成员检测、从序列中去除重复项以及数学中的集合类计算。集合接口定义的操作包括：]]></summary></entry><entry><title type="html">算法基础概念</title><link href="http://localhost:4000/%E7%AE%97%E6%B3%95/2022/07/06/%E7%AE%97%E6%B3%95-0000.html" rel="alternate" type="text/html" title="算法基础概念" /><published>2022-07-06T00:00:00+08:00</published><updated>2022-07-06T00:00:00+08:00</updated><id>http://localhost:4000/%E7%AE%97%E6%B3%95/2022/07/06/%E7%AE%97%E6%B3%95-0000</id><content type="html" xml:base="http://localhost:4000/%E7%AE%97%E6%B3%95/2022/07/06/%E7%AE%97%E6%B3%95-0000.html"><![CDATA[<h3 id="1-什么是算法">1. 什么是算法</h3>
<p>算法可以看作一个过程，把每个输入映射到唯一的一个输出。</p>

<p>如果算法对问题所有可能的输入都得到了正确的输出，那么就说算法<strong>解决</strong>了该问题。</p>

<h3 id="2-评价算法">2. 评价算法</h3>
<p>给定一个算法，如何评价算法？首先要验证算法是否正确，然后要评价算法的效率。</p>

<h4 id="21-验证算法的正确性">2.1 验证算法的正确性。</h4>
<p>如果算法的输入空间小，可以逐案例分析，但是这毕竟是少数的情况。更常见的情况是算法有任意多种情况的输入，输入空间无限大，例如对数组进行排序，数组的长度和项有无穷多种可能。那么如何对这类算法进行正确性验证呢？这时候就要采用数学证明上常用的<strong>数学归纳法</strong>，或者用计算机的语言说叫做递归证明。步骤如下：</p>
<ul>
  <li>首先证明基本情况成立。</li>
  <li>假定子问题下算法成立，通过子问题推导出当前问题下算法成立。</li>
</ul>

<h4 id="22-评价算法的效率">2.2 评价算法的效率</h4>
<p>算法效率方面要评价算法的<strong>时间复杂度</strong>和<strong>空间复杂度</strong>。在特定的输入规模下，空间复杂度评价算法的存储空间消耗，时间复杂度评价算法的快慢。</p>

<p>在评价算法的复杂度时，有几点需要注意：</p>
<ul>
  <li>评价时希望时间复杂度独立于机器，因此是把算法中基本操作看作一个单位，对算法所涉及的基本操作进行计数，以所有的基本操作数目来评价算法的时间复杂度。例如，把加法、乘法、赋值等都看成执行时间相等的基本操作，算法所耗的时间就是这些基本操作的总数目。基本操作涉及到计算模型，详见下方。</li>
  <li>假定输入规模为 n，得到的基本操作总数目的表达式可能非常复杂，难以直接比较，需要方法来简化。<strong>在输入规模 n 非常大的情况下</strong>，复杂度表达式会被高阶项所主导，低阶项就不那么重要，因此，我们在评价复杂度时，采用渐进复杂度，即<strong>忽略表达式中的常数因子和低阶项</strong>。常见的渐进复杂度记号有上界(O)，下界(Ω)，紧确界(Θ)。</li>
</ul>

<h3 id="3-计算模型">3. 计算模型</h3>
<p>指定机器上执行什么操作消耗 O(1) 时间，用于时间复杂度评价。处理器可以在常数项时间内完成的操作有：</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1. 整数算术：+, -, *, //, %
2. 逻辑操作：&amp;&amp;, \|\|, !, ==, &lt;, &gt;, &lt;=, &gt;=
3. 位操作：&amp;, \|, &lt;&lt;, &gt;&gt;
4. machine word 大小的内存读取和写入操作
</code></pre></div></div>
<p>这些操作就是汇编语言中的基础指令，在时间复杂度分析时，通过对这些基本操作进行计数，再通过渐进记号忽略掉不重要的常数因子和低阶项，最后得到的就是算法的时间复杂度。</p>]]></content><author><name>syh</name><email>songibicf@gmail.com</email></author><category term="算法" /><summary type="html"><![CDATA[1. 什么是算法 算法可以看作一个过程，把每个输入映射到唯一的一个输出。]]></summary></entry></feed>