<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-07-07T16:41:15+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">syh 的博客</title><subtitle>记录计算机专业相关内容，Mens et Manus
</subtitle><author><name>syh</name><email>songibicf@gmail.com</email></author><entry><title type="html">数据结构与序列接口</title><link href="http://localhost:4000/%E7%AE%97%E6%B3%95/2022/07/07/%E7%AE%97%E6%B3%95-0001.html" rel="alternate" type="text/html" title="数据结构与序列接口" /><published>2022-07-07T00:00:00+08:00</published><updated>2022-07-07T00:00:00+08:00</updated><id>http://localhost:4000/%E7%AE%97%E6%B3%95/2022/07/07/%E7%AE%97%E6%B3%95-0001</id><content type="html" xml:base="http://localhost:4000/%E7%AE%97%E6%B3%95/2022/07/07/%E7%AE%97%E6%B3%95-0001.html"><![CDATA[<h3 id="1-数据结构">1. 数据结构</h3>
<ul>
  <li><strong>数据结构</strong>是存储数据的一种方式，通过实现特定算法来支持特定的数据操作。</li>
  <li>
    <p>数据结构所支持的所有操作的集合叫做<strong>接口</strong> (interface/API/ADT)</p>
  </li>
  <li>接口相当于<strong>规范</strong> (specification)，指定了支持的操作。</li>
  <li>数据结构是<strong>表现</strong> (representation)，指定了操作的具体实现。</li>
</ul>

<h3 id="2-序列接口-sequence-interface">2. 序列接口 (Sequence Interface)</h3>
<p>序列由多个有特定顺序的项组成，例如长度为 n 的序列可以表示为 (x0, x1, x2, …, xn-1)。序列接口指定的操作有：</p>

<p><img src="/image/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95-0001-1.png" alt="序列操作" /></p>

<h3 id="3-序列的三种实现方式">3. 序列的三种实现方式</h3>
<p>序列接口指定了序列所要支持的创建操作、静态操作、动态操作。序列数据结构有三种实现方式：数组序列 ( Array Sequence )、链表序列 ( Linked List Sequence )、动态数组序列 ( Dynamic Array Sequence )。这三种数据结构有一致的序列接口，但是内部的实现方式不同，导致的结果是操作的时间复杂度不同。</p>

<h4 id="31-数组序列">3.1 数组序列</h4>
<ul>
  <li>数组序列维持内存中固定尺寸的存储空间，并把序列中的每个项依次放入内存中。例如创建有 10 个项的 int 数组，那么就需要调用 (int *)malloc(sizeof(int) * 10) 来分配固定尺寸的空间。</li>
  <li>由于第 i 项的地址可以直接计算出来，静态操作中的访问和设置花费 O(1) 时间。</li>
  <li>动态操作比较特殊。由于内存中分配的存储空间尺寸是固定的，因此对数组的任何动态修改，都需要重新分配存储空间，然后执行复制操作，时间复杂度为 O(n)。</li>
</ul>

<p><img src="/image/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95-0001-2.png" alt="数组序列的的时间复杂度" /></p>

<h4 id="32-链表序列">3.2 链表序列</h4>
<p>存储：</p>
<ul>
  <li>通过指针来实现。</li>
  <li>每个项存储在结点 ( node ) 中，每个结点包含项 ( node.item )，同时包含指向下一个结点的指针 ( node.next )。</li>
  <li>链表序列保持了指向第一个结点的指针，一般叫做 head</li>
</ul>

<p>静态操作：</p>
<ul>
  <li>无法直接计算出项的地址，只能从 head 结点依次往后遍历，时间复杂度为 O(n)</li>
</ul>

<p>动态操作：</p>
<ul>
  <li>在链表头插入和删除结点只需要 O(1) 时间复杂度，修改指针即可完成。</li>
  <li>由于项的顺序是通过指针来链接起来的，通过修改指针，就可以实现重排结点。不需要像数组序列一样移动大量的项。</li>
  <li>但是 insert_last，delete_last，insert_at，delete_at 都得首先找到结点，然后再修改指针，时间复杂度还是为 O(n)。</li>
</ul>

<p>链表序列相比于数组序列，在静态操作上不占优势。在动态操作上，优势也只在 insert_first, delete_first 操作上。</p>

<p><img src="/image/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95-0001-3.png" alt="链表序列的时间复杂度" /></p>

<h4 id="33-动态数组序列">3.3 动态数组序列</h4>
<p>主要目的：保持访问操作为 O(1) 的前提下，实现 insert_last, delete_last 时间复杂度为 O(1)。python 中的 list 类型为动态数组。</p>

<p>存储：</p>
<ul>
  <li>主要方法：既然数组序列中动态操作的时间花费在往新分配的存储空间复制元素上，那么就一次分配相对大的存储空间。只要存储空间不占满，对末尾元素的修改就不需要执行耗时的分配空间和复制操作。序列长度与存储空间长度的比值 r 要维持在一定的比例。</li>
</ul>

<p>静态操作：</p>
<ul>
  <li>由于在数组的基础上实现，可以实现随机访问。</li>
</ul>

<p>动态操作：</p>
<ul>
  <li>和数组差别在于每次操作都得检查 r, 判断是否需要重新分配存储空间。</li>
  <li>末尾插入
    <ul>
      <li>如果 r &lt; 1, 直接在末尾插入</li>
      <li>如果 r == 1， 在末尾要分配 Θ(n) 额外的空间来维持 r</li>
      <li>由于提前分配了多余的存储空间，在下次分配前，可以插入 Θ(n) 次。摊还分析后，在末尾插入元素的平均时间复杂度只有 O(1)</li>
    </ul>
  </li>
  <li>末尾删除
    <ul>
      <li>可以直接删除，但是为了节省空间，当 r 小于阈值 rd 时，重新分配一个小的空间。例如 rd 可以取 1/4，分配的空间可以取为原先空间的一半，当删除元素到只有存储空间的 1/4 时，就会把存储空间重新分配为一半，r 维持在 [1/4, 1]。</li>
      <li>平均后，末尾删除操作的时间复杂度为 O(1)</li>
    </ul>
  </li>
</ul>

<p>三种序列实现所涉及操作的时间复杂度：</p>

<p><img src="/image/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95-0001-4.png" alt="动态数组序列的时间复杂度" /></p>

<p>三种序列数据结构各有特点，以上介绍的只是基本实现，这些数据结构有非常多种的变形，以达到不同的应用目的。例如，除了上面介绍的单链表，还有双链表、循环链表，除了在末尾动态分配空间的动态数组，还可以在序列开头也进行动态分配。要根据实际的操作选择合适的数据结构。</p>]]></content><author><name>syh</name><email>songibicf@gmail.com</email></author><category term="算法" /><summary type="html"><![CDATA[1. 数据结构 数据结构是存储数据的一种方式，通过实现特定算法来支持特定的数据操作。 数据结构所支持的所有操作的集合叫做接口 (interface/API/ADT)]]></summary></entry><entry><title type="html">算法基础概念</title><link href="http://localhost:4000/%E7%AE%97%E6%B3%95/2022/07/06/%E7%AE%97%E6%B3%95-0000.html" rel="alternate" type="text/html" title="算法基础概念" /><published>2022-07-06T00:00:00+08:00</published><updated>2022-07-06T00:00:00+08:00</updated><id>http://localhost:4000/%E7%AE%97%E6%B3%95/2022/07/06/%E7%AE%97%E6%B3%95-0000</id><content type="html" xml:base="http://localhost:4000/%E7%AE%97%E6%B3%95/2022/07/06/%E7%AE%97%E6%B3%95-0000.html"><![CDATA[<h3 id="1-什么是算法">1. 什么是算法</h3>
<p>算法可以看作一个过程，把每个输入映射到唯一的一个输出。</p>

<p>如果算法对问题所有可能的输入都得到了正确的输出，那么就说算法<strong>解决</strong>了该问题。</p>

<h3 id="2-评价算法">2. 评价算法</h3>
<p>给定一个算法，如何评价算法？首先要验证算法是否正确，然后要评价算法的效率。</p>

<h4 id="21-验证算法的正确性">2.1 验证算法的正确性。</h4>
<p>如果算法的输入空间小，可以逐案例分析，但是这毕竟是少数的情况。更常见的情况是算法有任意多种情况的输入，输入空间无限大，例如对数组进行排序，数组的长度和项有无穷多种可能。那么如何对这类算法进行正确性验证呢？这时候就要采用数学证明上常用的<strong>数学归纳法</strong>，或者用计算机的语言说叫做递归证明。步骤如下：</p>
<ul>
  <li>首先证明基本情况成立。</li>
  <li>假定子问题下算法成立，通过子问题推导出当前问题下算法成立。</li>
</ul>

<h4 id="22-评价算法的效率">2.2 评价算法的效率</h4>
<p>算法效率方面要评价算法的<strong>时间复杂度</strong>和<strong>空间复杂度</strong>。在特定的输入规模下，空间复杂度评价算法的存储空间消耗，时间复杂度评价算法的快慢。</p>

<p>在评价算法的复杂度时，有几点需要注意：</p>
<ul>
  <li>评价时希望时间复杂度独立于机器，因此是把算法中基本操作看作一个单位，对算法所涉及的基本操作进行计数，以所有的基本操作数目来评价算法的时间复杂度。例如，把加法、乘法、赋值等都看成执行时间相等的基本操作，算法所耗的时间就是这些基本操作的总数目。基本操作涉及到计算模型，详见下方。</li>
  <li>假定输入规模为 n，得到的基本操作总数目的表达式可能非常复杂，难以直接比较，需要方法来简化。<strong>在输入规模 n 非常大的情况下</strong>，复杂度表达式会被高阶项所主导，低阶项就不那么重要，因此，我们在评价复杂度时，采用渐进复杂度，即<strong>忽略表达式中的常数因子和低阶项</strong>。常见的渐进复杂度记号有上界(O)，下界(Ω)，紧确界(Θ)。</li>
</ul>

<h3 id="3-计算模型">3. 计算模型</h3>
<p>指定机器上执行什么操作消耗 O(1) 时间，用于时间复杂度评价。处理器可以在常数项时间内完成的操作有：</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1. 整数算术：+, -, *, //, %
2. 逻辑操作：&amp;&amp;, \|\|, !, ==, &lt;, &gt;, &lt;=, &gt;=
3. 位操作：&amp;, \|, &lt;&lt;, &gt;&gt;
4. machine word 大小的内存读取和写入操作
</code></pre></div></div>
<p>这些操作就是汇编语言中的基础指令，在时间复杂度分析时，通过对这些基本操作进行计数，再通过渐进记号忽略掉不重要的常数因子和低阶项，最后得到的就是算法的时间复杂度。</p>]]></content><author><name>syh</name><email>songibicf@gmail.com</email></author><category term="算法" /><summary type="html"><![CDATA[1. 什么是算法 算法可以看作一个过程，把每个输入映射到唯一的一个输出。]]></summary></entry></feed>